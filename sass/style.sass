*, ::after, ::before                                 
	margin: 0
	padding: 0
	box-sizing: border-box
	// Здесть мы скидываем все лишние внешние и внутриние отступы на всей странице а так же у псевдоэлиментов и устанавливаем бордер бокс для того что бы проще выщитывать розмеры тех или иных элиментов 

html
	font-size: 62.5% // В этом блоке мы устанавливаем размер шрифта на всей странице в 62.5% для того что бы в дальнейшем на всей странице  в большенстве случаев использовать еденицы измерения REM вместо PX, что бы сразу же вестать адаптивный сайт, мы задаем розмер в 10 пикселей в % соотношении для того что бы нам было легче высчитовать REM так как его изначальный розмер составляет 16 PX 

body
	font-family: "Lato", sans-serif
	font-weight: 400
	color: #777777
	font-size: 1.6rem
	letter-spacing: .2rem
	padding: 5rem
	background-color: white

	// Тут устанавливем шрифт и рамку в 50 пиксилей вокруг нашего сайта

.container
	background-color: #F7F7F7
// Задаем цвет фона сайта

.header
	position: relative
	height: 95vh
	background: linear-gradient(90deg, rgba(186, 133, 84, 0.7) 0.03%, rgba(1, 1, 1, 0.7) 99.94%), url(../img/header_bg.jpg) center / cover no-repeat 
	clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 80%)
	//1 )Здесь задаем ширину видимого экрана 2)Вставляем градиент с макета далее подключаем фото , делаем по центру , делаем шоб не повторялось 3) Задаем свойство clip-path: для того что бы сделать наше фото фона на искось как в макете для этого используем сайт https://bennettfeely.com/clippy/  
	&__logo
		position: absolute
		left: 5rem
		top: 5rem
		width: 5.6rem
		height: 7rem
	// 1) Здаем абсолютное позиционирование, но для того что бы оно работало нам нужно задать position: relative родительскому элименту для того что бы мы могли позиционировать элимент от нашего контейнера 2) дальше задаем отступ слева и сверху по 50 пикселей 3) задаем ширину и высоту нащего элимента как в макете 
	&__box
		position: absolute
		top: 40%
		left: 50%
		transform: translate( -50%, -50%)
		width: 100%
		text-align: center

// В этом блоке мы центрируем наш заголовок , для начала задаем апсолютную позицию нашему заголовку что бы мы могли отталкиваться от нашего контейнера , после задаем сверху и слева по 50% для того что бы заголовок был гибким , но это не центрирует наш заголвок по центру для этого нам нужно еще убрать 50%X от ширины и 50%Y от высоты нашего __box контейнера, делаем это с помощу свойства transform: translate , далее для того что бы наш заголовок был на всю ширину то задаем ему свойство width: 100% и свойством text-align: center центрируем наш заголовок
	 
.title-first
	color: #ffffff
	&__main
		display: block
		font-weight: 800
		font-size: 5rem
		line-height: 6rem
		letter-spacing: 1rem
		text-transform: uppercase
		margin-bottom: 1rem
		animation-name: leftToRight //Определяет имя @keyframes, настраивающего кадры анимации.
		animation-duration: 1.7s //Определяет время, в течение которого должен пройти один цикл анимации.
		animation-delay: 0.1s // Настраивает задержку между временем загрузки элемента и временем начала анимации.
		animation-timing-function: ease //Настраивает ускорение анимации.
		backface-visibility: hidden //Задняя поверхность скрыта, что делает элемент невидимым, когда он повёрнутый от пользователя.
	&__secondary
		display: block
		font-weight: 100
		font-size: 4rem
		line-height: 4.8rem
		letter-spacing: .8rem
		animation-name: rightToLeft
		animation-duration: 1.7s
		animation-delay: 0.1s
		animation-timing-function: ease
		backface-visibility: hidden
		margin-bottom: 6.5rem
	// В этом блоке мы стализуем наш заголовок первого уровня, задаем цевет , ширину , начертание. шрифт и тд. а также делаем их блочными элиментами для того что бы кажен элимент находился на своей строке делаем это из-за того что span строчный элимент и он не переносится на другую строку . А также делаем отступ от первого элимента span на 10 пиксилей. Дальше настраиваем анимацию для нашего заголовка. После свойстом margin-bottom: 50px мы отодвигаем нашу кнопку(НАШ КАТАЛОГ) от нашего элимента title-first__secondary

.btn
	&:link, &:visited
		text-transform: uppercase
		text-decoration: none
		color: #777777
		padding: 1.5rem 4rem
		background: white
		border-radius: 5rem
		display: inline-block
		transition: all .3s
		position: relative
		font-size: 2rem
	&:hover
		transform: translateY(-4px)
		box-shadow: (0px 4px 4px rgba(0, 0, 0, 0.4))
		&::after 
			opacity: 0
			transform: scaleX(1.5) scaleY(1.7)
	&:active
		transform: translateY(-2px)
		box-shadow: (0px 4px 4px rgba(0, 0, 0, 0.2))
	&::after
		content: ""
		background: white
		width: 100%
		height: 100%
		border-radius: 5rem
		display: inline-block
		position: absolute
		top: 0
		left: 0
		z-index: -1
		transition: all .4s
	&_animated
		animation: BtnToUp .5s ease-out .7s
		animation-fill-mode: backwards
// В этом блоке мы стиализуем нашу кнопку , 1) для начала мы обратимся к псевдо классам нашей ссылки , 2) далее делаем текст большими буквами 3) Убераем подчеркивание у ссылки 4) Задаем цвет текста 5) Устанавливаем внутриные оступы для нашей кнопки 6) Задаем фон кнопки 7) Задаем закругление для  кнопки 8) Делаем нашу кнопку инлайн блочным элиментом, для того что бы кнопка не заползала на наши верхние элименты 9) Здесь мы задаем свойство которое дает нам возможность задавать длительность и плавность тех или иных переходов, трансформаций. В нащни случае это плавность на нажатии кнопки которое мы задаем далее 10) &:hover отвечает за наведенение на кнопку , задав псевдо класу &:hover значение transform: translateY(4px) при наведении мы будем её приподнимать на 4пикселя  и свойством box-shadow: добавляем тень при наведении 11) &:active отвечает за нажатие на кнопку , задав псевдо класу &:active значение transform: translateY(4px) при нажатии  мы будем её опускать  на 2пикселя, так же и тут добавляем тень но в этом случае при нажатии тень будет немного прозрачнее 
// Добавляем вторую анимацию  при навидении кнопка будет как будто взрываться, для этого нам нужно создать псевдо элимент &::after - который позволяет создать нам дочерний элимент нашей кнопки, (ВАЖНО - для того что бы данный псевдо элимент работал у нас всегда должно стоять  первым свойство content: "") после данного свойства мы задаем цвет фона, ширину , высоту , закругление нашей кнопки  и делаем инлай блочным элиментом для того что бы мы могли её абсолютно позиционировать , но для того что бы все заработало мы должны задать нашему дочернему элименту, то есть .btn свойство position: relative и  выровнять наш псевдо элимент ровно над дочерним элиментом задав сверху и слева по 0 пикселей, но и для того что бы поместить наш псоведо элимент под наш дочерний элимент то  задаем ему свойство z-index: -1, после нам нужно вернуться нащему дочернему элиментку к псевдо классу &:hover что бы добавать анимацию к нашей кнопки но уже с помощу псевдо элимента, после того где мы задали тень в нашем псевдо классе мы обращаемся к псевдо элименту &::after и используем значения opacity: 0 transform: scaleX(1.5) scaleY(1.7) (Больше об этом свойстве https://developer.mozilla.org/ru/docs/Web/CSS/transform) для того что бы наш псовдо элимент который мы скрывали z-index: -1 начал подносится над нашим дочерним элиментом , далеее мы возвращаемся к нашему псевдо элименту и задаем ему свойство 	transition: all .4s которое  дает нам возможность обращаться ко всем элимента и  задавать длительность и плавность тех или иных переходов, трансформаций. 
// Добавляем третью анимацию на нашу кнопку, для этого нам нужно создать новый @keyframes  с двумя точками от 0 до 100% и указать свойство от прозрачного к видимому свойством opacity: 0 - 1 далее мы указываем свойство transform: translateY что бы наш элимент двигался с низу вверх или наооборот это уже по желанию в нашем случаем с низу вверх, после чего мы дожны добавить наш @keyframes кнопке , в нашем случае нам нужно сделать это для определеной кнопки по этому мы должны обратиться  к модификатору нашей кномки  &_animated , по тому что данная анимацию будет находится у нас только в этом разделе. Далее animation: BtnToUp .5s ease-out .7s указываем названим нашей анимации @keyframes  , какое количество времени будет происходить эта анимация. далее то с какими ускорение или замедление будет происходить наша анимаци и последнее значение это время задержки перед тем как эта анимация будет воспроизводится. Далее мы добавляем свойство animation-fill-mode: со значением backwards  даное свойство с значением дает нам возможность скрыть нашу кнопку перед тек как начнется наша анимация болеше об этом свойстве можно почитать https://developer.mozilla.org/ru/docs/Web/CSS/animation-fill-mode
		
@keyframes BtnToUp
	0%
		opacity: 0
		transform: translateY(5rem)
	
		
	100%
		opacity: 1
		transform: translateY(0px)	




@keyframes leftToRight
	0%
		opacity: 0
		transform: translateX(-10rem)
	80%
		transform: translateX(1rem)
		
	100%
		opacity: 1
		transform: translateX(0px)

@keyframes rightToLeft
	0%
		opacity: 0
		transform: translateX(10rem)
	80%
		transform: translateX(-1rem)
		
	100%
		opacity: 1
		transform: translateX(0px)

// @keyframes  ключевое слово для созданния анимациии, после задаем имя анимации , далее прописываем ключевые точки , на каких процентах будет проходить то или иное действие , мы можем затавать точки от 0 до 100 % их может быть сколько угодно , в нутри кажной точки мы должны прописать действие анимации, например ( на первой точке задаем значение opacity: 0 и на последней  opacity: 1 ) дальше берем наше имя анимации и применяем к нашему заголовку свойством animation-name: leftToRight //Определяет имя @keyframes, настраивающего кадры анимации. Далее animation-duration: 4s Определяет время, в течение которого должен пройти один цикл.И свойством анимацииanimation-delay: 0.1s Настраивает задержку между временем загрузки элемента и временем начала анимации дальеш по желанию настраиваем плавность  animation-timing-function: ease Настраивает ускорение анимации. При обновлении страници наш заголовок сперва не видимый и потом на 4 секунде становится полностю видимый, дальше мы можем заставить наш заголовок двигаться с лева на право или сверху в низу и на оборот используя свойство transform: translateX или transform: translateY больще можно узнать на сайте https://developer.mozilla.org/ru/docs/Web/CSS/CSS_Animations/Using_CSS_anima. Кажен раз когда мы создаем и используем анимацию нам нужно ее оптимизировать нашу анимацию по тому что очень часто бываю сбои, оптимизируем  свойством backface-visibility  которое определяет, видно ли заднюю грань элемента, когда он повёрнут к пользователю. Это свойство имет два значения visible - Задняя сторона видна, когда повёрнута к пользователю. hidden - Задняя поверхность скрыта, что делает элемент невидимым, когда он повёрнутый от пользователя. 

		

